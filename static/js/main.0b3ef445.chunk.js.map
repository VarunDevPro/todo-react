{"version":3,"sources":["redux/todo/todoActions.js","redux/todo/todoTypes.js","redux/visibilityFilter/filterActions.js","redux/visibilityFilter/filterTypes.js","TodoContainer.js","redux/todo/todoReducer.js","redux/rootReducer.js","redux/visibilityFilter/filterReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["addTodo","todo","type","text","id","uuid","v4","toggleTodo","setVisibilityFilter","filter","TodoList","todos","onTodoClick","className","map","completed","key","onClick","TodoContainer","useSelector","state","visibilityFilter","dispatch","useDispatch","getVisibleTodos","onAddClick","onFilterClick","AddTodo","input","onSubmit","e","preventDefault","value","autoFocus","ref","node","FilterLink","currentFilter","children","style","opacity","Footer","t","initialState","todoReducer","action","rootReducer","combineReducers","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b3ef445.chunk.js","sourcesContent":["import uuid from \"uuid\";\r\n\r\nimport { ADD_TODO, TOGGLE_TODO } from \"./todoTypes\";\r\n\r\nexport const addTodo = (todo = \"\") => {\r\n  return {\r\n    type: ADD_TODO,\r\n    text: todo,\r\n    id: uuid.v4()\r\n  };\r\n};\r\n\r\nexport const toggleTodo = (id = \"\") => {\r\n  return {\r\n    type: TOGGLE_TODO,\r\n    id: id\r\n  };\r\n};\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\n","import { SET_VISIBILITY_FILTER } from \"./filterTypes\";\r\n\r\nexport const setVisibilityFilter = (filter = \"SHOW_ALL\") => {\r\n  return {\r\n    type: SET_VISIBILITY_FILTER,\r\n    filter\r\n  };\r\n};\r\n","export const SET_VISIBILITY_FILTER = \"SET_VISIBILITY_FILTER\";\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { addTodo, toggleTodo, setVisibilityFilter } from \"./redux\";\r\n\r\nfunction TodoContainer() {\r\n  const todos = useSelector(state => state.todos);\r\n  const visibilityFilter = useSelector(state => state.visibilityFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"todo-app\">\r\n      <h1 className=\"todo-title\">Todos</h1>\r\n      <TodoList\r\n        todos={getVisibleTodos(todos, visibilityFilter)}\r\n        onTodoClick={id => dispatch(toggleTodo(id))}\r\n      />\r\n      <AddTodo onAddClick={text => dispatch(addTodo(text))} />\r\n      <Footer\r\n        visibilityFilter={visibilityFilter}\r\n        onFilterClick={filter => dispatch(setVisibilityFilter(filter))}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst TodoList = ({ todos, onTodoClick }) => {\r\n  return (\r\n    <ul className=\"todo-list\">\r\n      {todos.map(({ completed, id, text }) => (\r\n        <li\r\n          key={id}\r\n          className={completed ? \"todo todo--completed\" : \"todo\"}\r\n          onClick={() => onTodoClick(id)}\r\n        >\r\n          <span className=\"todo__content\">{text}</span>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TodoContainer;\r\n\r\nconst AddTodo = ({ onAddClick }) => {\r\n  let input;\r\n  return (\r\n    <div className=\"add-todo\">\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          input.value && onAddClick(input.value);\r\n          input.value = \"\";\r\n        }}\r\n      >\r\n        <input\r\n          autoFocus\r\n          className=\"add-todo__input\"\r\n          ref={node => {\r\n            input = node;\r\n          }}\r\n        />\r\n        <button\r\n          className=\"add-todo__btn\"\r\n          onClick={() => {\r\n            input.value && onAddClick(input.value);\r\n            input.value = \"\";\r\n          }}\r\n        >\r\n          <i className=\"fa fa-plus\"></i>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FilterLink = ({ filter, currentFilter, children, onClick }) => {\r\n  return (\r\n    <button\r\n      className=\"filter__link\"\r\n      onClick={e => {\r\n        e.preventDefault();\r\n        onClick(filter);\r\n      }}\r\n      style={{ opacity: currentFilter === filter ? 0.2 : 1 }}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst Footer = ({ visibilityFilter, onFilterClick }) => (\r\n  <div className=\"filters\">\r\n    <FilterLink\r\n      filter=\"SHOW_ALL\"\r\n      currentFilter={visibilityFilter}\r\n      onClick={onFilterClick}\r\n    >\r\n      <i className=\"fa fa-list-ul\"></i>\r\n    </FilterLink>\r\n    <FilterLink\r\n      filter=\"SHOW_ACTIVE\"\r\n      currentFilter={visibilityFilter}\r\n      onClick={onFilterClick}\r\n    >\r\n      <i className=\"fa fa-times\"></i>\r\n    </FilterLink>\r\n    <FilterLink\r\n      filter=\"SHOW_COMPLETED\"\r\n      currentFilter={visibilityFilter}\r\n      onClick={onFilterClick}\r\n    >\r\n      <i className=\"fa fa-check\"></i>\r\n    </FilterLink>\r\n  </div>\r\n);\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case \"SHOW_ALL\":\r\n      return todos;\r\n    case \"SHOW_COMPLETED\":\r\n      return todos.filter(t => t.completed);\r\n    case \"SHOW_ACTIVE\":\r\n      return todos.filter(t => !t.completed);\r\n    default:\r\n      return todos;\r\n  }\r\n};\r\n","import { TOGGLE_TODO, ADD_TODO } from \"./todoTypes\";\r\n\r\nconst initialState = [];\r\n\r\nconst todoReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ];\r\n    case TOGGLE_TODO:\r\n      return state.map(todo => {\r\n        if (todo.id !== action.id) {\r\n          return todo;\r\n        }\r\n        return {\r\n          ...todo,\r\n          completed: !todo.completed\r\n        };\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todoReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport todoReducer from \"./todo/todoReducer\";\r\nimport filterReducer from \"./visibilityFilter/filterReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todos: todoReducer,\r\n  visibilityFilter: filterReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { SET_VISIBILITY_FILTER } from \"./filterTypes\";\r\nconst initialState = \"SHOW_ALL\";\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_VISIBILITY_FILTER:\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from \"redux\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Provider } from \"react-redux\";\nimport TodoContainer from \"./TodoContainer\";\nimport store from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <TodoContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}